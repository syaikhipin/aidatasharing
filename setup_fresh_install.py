#!/usr/bin/env python3
"""
Fresh Installation Setup Script
Sets up the AI Share Platform with clean database and configuration
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, cwd=None):
    """Run a command and return success status"""
    try:
        result = subprocess.run(command, shell=True, cwd=cwd, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"✅ {command}")
            return True
        else:
            print(f"❌ {command}")
            print(f"   Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ {command}")
        print(f"   Exception: {e}")
        return False

def setup_directories():
    """Create necessary directories"""
    print("📁 Setting up directories...")
    
    directories = [
        "storage",
        "storage/uploads", 
        "storage/documents",
        "storage/logs",
        "storage/backups",
        "logs",
        "tests",
        "docs"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"   ✅ Created: {directory}")

def setup_environment():
    """Setup environment configuration"""
    print("⚙️  Setting up environment configuration...")
    
    # Copy .env.example to .env if .env doesn't exist
    if not os.path.exists(".env"):
        if os.path.exists(".env.example"):
            shutil.copy2(".env.example", ".env")
            print("   ✅ Created .env from .env.example")
        else:
            print("   ⚠️  .env.example not found")
    
    # Update backend .env to point to unified database
    backend_env_content = """# AI Share Platform - Backend Environment Configuration
# This file is automatically generated - edit the main .env file instead

# Database Configuration (unified)
DATABASE_URL=sqlite:///./storage/aishare_platform.db

# This file inherits all other settings from the main .env file
# The backend will load both files, with this one taking precedence for DATABASE_URL
"""
    
    with open("backend/.env", "w") as f:
        f.write(backend_env_content)
    print("   ✅ Updated backend/.env")
    
    # Update frontend .env.local
    frontend_env_content = """# Frontend Environment Configuration
NEXT_PUBLIC_API_URL=http://localhost:8000
NODE_ENV=development
"""
    
    with open("frontend/.env.local", "w") as f:
        f.write(frontend_env_content)
    print("   ✅ Updated frontend/.env.local")

def install_dependencies():
    """Install Python and Node.js dependencies"""
    print("📦 Installing dependencies...")
    
    # Install backend dependencies
    print("   Installing Python dependencies...")
    if run_command("pip install -r requirements.txt", cwd="backend"):
        print("   ✅ Backend dependencies installed")
    else:
        print("   ❌ Failed to install backend dependencies")
        return False
    
    # Install frontend dependencies
    print("   Installing Node.js dependencies...")
    if run_command("npm install", cwd="frontend"):
        print("   ✅ Frontend dependencies installed")
    else:
        print("   ❌ Failed to install frontend dependencies")
        return False
    
    return True

def run_database_migration():
    """Run the fresh installation database migration"""
    print("🗄️  Setting up database...")
    
    # Run the fresh install migration
    if run_command("python migrations/fresh_install_migration.py"):
        print("   ✅ Database migration completed")
        return True
    else:
        print("   ❌ Database migration failed")
        return False

def create_startup_scripts():
    """Create improved startup scripts"""
    print("🚀 Creating startup scripts...")
    
    # Development startup script
    dev_script = """#!/bin/bash
# AI Share Platform - Development Startup Script

echo "🚀 Starting AI Share Platform Development Environment..."

# Check if conda environment exists and activate it
if conda info --envs | grep -q "aishare-platform"; then
    echo "📦 Activating conda environment: aishare-platform"
    source $(conda info --base)/etc/profile.d/conda.sh
    conda activate aishare-platform
else
    echo "⚠️  Conda environment 'aishare-platform' not found"
    echo "   Create it with: conda create -n aishare-platform python=3.9"
    echo "   Then run: conda activate aishare-platform && pip install -r backend/requirements.txt"
fi

# Create necessary directories
mkdir -p storage/uploads storage/documents storage/logs logs

# Start backend in background
echo "🔧 Starting backend server..."
cd backend && python start.py &
BACKEND_PID=$!

# Wait a moment for backend to start
sleep 3

# Start frontend in background  
echo "🎨 Starting frontend server..."
cd ../frontend && npm run dev &
FRONTEND_PID=$!

echo "✅ Development environment started!"
echo "   Backend: http://localhost:8000"
echo "   Frontend: http://localhost:3000"
echo "   Admin: admin@aishare.com / admin123"
echo ""
echo "Press Ctrl+C to stop all services"

# Wait for interrupt
trap 'echo "🛑 Stopping services..."; kill $BACKEND_PID $FRONTEND_PID; exit 0' INT
wait
"""
    
    with open("start-dev.sh", "w") as f:
        f.write(dev_script)
    os.chmod("start-dev.sh", 0o755)
    print("   ✅ Created start-dev.sh")
    
    # Stop script
    stop_script = """#!/bin/bash
# AI Share Platform - Stop Development Environment

echo "🛑 Stopping AI Share Platform..."

# Kill backend processes
pkill -f "python.*start.py" 2>/dev/null
pkill -f "uvicorn.*main:app" 2>/dev/null

# Kill frontend processes  
pkill -f "npm.*run.*dev" 2>/dev/null
pkill -f "next.*dev" 2>/dev/null

echo "✅ All services stopped"
"""
    
    with open("stop-dev.sh", "w") as f:
        f.write(stop_script)
    os.chmod("stop-dev.sh", 0o755)
    print("   ✅ Created stop-dev.sh")

def cleanup_old_files():
    """Clean up old database and configuration files"""
    print("🧹 Cleaning up old files...")
    
    old_files = [
        "app.db",
        "backend/app.db",
        "fix_database.py"
    ]
    
    for file_path in old_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"   ✅ Removed: {file_path}")
            except Exception as e:
                print(f"   ⚠️  Failed to remove {file_path}: {e}")

def main():
    """Main setup function"""
    print("🎯 AI Share Platform - Fresh Installation Setup")
    print("=" * 50)
    
    try:
        # Step 1: Setup directories
        setup_directories()
        
        # Step 2: Setup environment
        setup_environment()
        
        # Step 3: Install dependencies
        if not install_dependencies():
            print("❌ Setup failed at dependency installation")
            return False
        
        # Step 4: Run database migration
        if not run_database_migration():
            print("❌ Setup failed at database migration")
            return False
        
        # Step 5: Create startup scripts
        create_startup_scripts()
        
        # Step 6: Cleanup old files
        cleanup_old_files()
        
        print("\n" + "=" * 50)
        print("✅ Fresh Installation Setup Complete!")
        print("\n🚀 To start the development environment:")
        print("   ./start-dev.sh")
        print("\n🛑 To stop the development environment:")
        print("   ./stop-dev.sh")
        print("\n👤 Default admin credentials:")
        print("   Email: admin@aishare.com")
        print("   Password: admin123")
        print("\n🌐 Access URLs:")
        print("   Frontend: http://localhost:3000")
        print("   Backend API: http://localhost:8000")
        print("   API Docs: http://localhost:8000/docs")
        
        return True
        
    except Exception as e:
        print(f"❌ Setup failed with error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)