"""
API endpoints for agent management and dataset interaction.
"""

from fastapi import APIRouter, Depends, HTTPException, status, Body
from sqlalchemy.orm import Session
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import logging

from app.core.database import get_db
from app.core.auth import get_current_user
from app.models.user import User
from app.models.dataset import Dataset
from app.services.agent_service import create_agent_service
from app.services.data_sharing import DataSharingService

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/agents", tags=["agents"])

# Request/Response Models
class AgentChatRequest(BaseModel):
    message: str
    agent_name: Optional[str] = None

class AgentChatResponse(BaseModel):
    success: bool
    response: str
    code: Optional[str] = None
    agent: Optional[str] = None
    planner: Optional[Dict[str, Any]] = None
    timestamp: Optional[str] = None
    error: Optional[str] = None

class AgentInfo(BaseModel):
    name: str
    display_name: str
    description: str
    icon: str
    category: str

class CodeExecutionRequest(BaseModel):
    code: str

class CodeExecutionResponse(BaseModel):
    success: bool
    result: Optional[str] = None
    output: Optional[str] = None
    error: Optional[str] = None

@router.get("/", response_model=List[AgentInfo])
async def get_available_agents(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Get list of available agents."""
    try:
        agent_service = create_agent_service(db)
        agents = agent_service.get_available_agents()
        return agents
    except Exception as e:
        logger.error(f"Failed to get available agents: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve available agents"
        )

@router.post("/datasets/{dataset_id}/chat", response_model=AgentChatResponse)
async def chat_with_dataset_agents(
    dataset_id: int,
    request: AgentChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Chat with dataset using AI agents."""
    try:
        # Check if dataset exists and user has access
        dataset = db.query(Dataset).filter(Dataset.id == dataset_id).first()
        if not dataset:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Dataset not found"
            )

        # Check access permissions
        data_sharing_service = DataSharingService(db)
        if not data_sharing_service.can_access_dataset(current_user, dataset):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied to this dataset"
            )

        # Create agent service and process chat
        agent_service = create_agent_service(db)
        result = agent_service.chat_with_dataset(
            dataset_id=dataset_id,
            message=request.message,
            agent_name=request.agent_name,
            user_id=current_user.id
        )

        return AgentChatResponse(**result)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Agent chat failed for dataset {dataset_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process chat request: {str(e)}"
        )

@router.post("/datasets/{dataset_id}/execute", response_model=CodeExecutionResponse)
async def execute_agent_code(
    dataset_id: int,
    request: CodeExecutionRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Execute code generated by agents."""
    try:
        # Check if dataset exists and user has access
        dataset = db.query(Dataset).filter(Dataset.id == dataset_id).first()
        if not dataset:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Dataset not found"
            )

        # Check access permissions
        data_sharing_service = DataSharingService(db)
        if not data_sharing_service.can_access_dataset(current_user, dataset):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied to this dataset"
            )

        # Execute code using agent service
        agent_service = create_agent_service(db)
        result = agent_service.execute_code_safely(
            code=request.code,
            dataset_id=dataset_id
        )

        return CodeExecutionResponse(**result)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Code execution failed for dataset {dataset_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to execute code: {str(e)}"
        )

@router.get("/templates")
async def get_agent_templates(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Get available agent templates for custom agent creation."""
    try:
        agent_service = create_agent_service(db)
        templates = agent_service.get_agent_templates()
        return templates
    except Exception as e:
        logger.error(f"Failed to get agent templates: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve agent templates"
        )

@router.get("/datasets/{dataset_id}/chat/history")
async def get_dataset_chat_history(
    dataset_id: int,
    limit: int = 50,
    offset: int = 0,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Get chat history for a dataset."""
    try:
        # Check if dataset exists and user has access
        dataset = db.query(Dataset).filter(Dataset.id == dataset_id).first()
        if not dataset:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Dataset not found"
            )

        # Check access permissions
        data_sharing_service = DataSharingService(db)
        if not data_sharing_service.can_access_dataset(current_user, dataset):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied to this dataset"
            )

        # For now, return empty history
        # In the future, you can implement chat history storage
        return {
            "messages": [],
            "total": 0,
            "limit": limit,
            "offset": offset
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to get chat history for dataset {dataset_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve chat history"
        )

@router.get("/health")
async def agent_health_check():
    """Check agent system health."""
    try:
        # Basic health check - can be expanded
        return {
            "status": "healthy",
            "agents_available": True,
            "timestamp": "2024-01-01T00:00:00Z"  # Use actual timestamp
        }
    except Exception as e:
        logger.error(f"Agent health check failed: {str(e)}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "agents_available": False
        }