# yaml-language-server: $schema=https://raw.githubusercontent.com/antinomyhq/forge/refs/heads/main/forge.schema.json
agents:
- id: forge
  tools:
  - forge_tool_task_list_append
  - forge_tool_task_list_append_multiple
  - forge_tool_task_list_mark_done
  - forge_tool_task_list_list
  - forge_tool_task_list_clear
variables:
  env: aishare-platform
  mindsdb_env: mindsdb-server
  operating_agent: forge
commands:
- name: fixme
  description: Looks for all the FIXME comments in the code and attempts to fix them.
  prompt: Find all the FIXME comments in source-code files and attempt to fix them.
- name: pr-description
  description: Updates the description of the PR.
  prompt: |-
    - I have created a Pull Request with all the accepted changes.
    - Understand the current PR deeply using the GH CLI and update the PR title and description.
    - Make sure the title follows the conventional commits standard.
    - Top-level summary should contain 2-3 lines about the core functionality improvements.
- name: check
  description: Checks if the code is ready to be committed.
  prompt: |-
    - Run the necessary linting and testing commands and verify if everything is fine.
    - Fix every issue found during this process.
model: anthropic/claude-sonnet-4
max_walker_depth: 1024
custom_rules: "# General Rules for Your Project\n\n## Proxy Features\n- Each service must have its own proxy implementation with distinct non-standard ports:\n  - **Backend:** `8000` (e.g., FastAPI)\n  - **Frontend:** `3000` (e.g., Next.js)\n  - **MySQL Proxy Connector:** `10101` (high port for MySQL proxy)\n  - **PostgreSQL Proxy Connector:** `10102` (high port for PostgreSQL proxy)\n  - **API Connector:** `10103` (high port for external API connections)\n  - **ClickHouse Proxy Connector:** `10104` (high port for ClickHouse proxy)\n  - **MongoDB Proxy Connector:** `10105` (high port for MongoDB proxy)\n  - **S3 Proxy Connector:** `10106` (high port for S3 proxy)\n  - **Shared Links Proxy:** `10107` (high port for shared links)\n- Ensure that all connections to MindsDB and databases utilize these proxies.\n\n## Environment Management\n- All Python code, including the backend, should run within the `aishare-platform` Conda environment.\n- MindsDB-related code should reference the `mindsdb-server` environment.\n- Make sure to adhere to MindsDB documentation concerning file uploads and data interactions.\n\n## Operational Protocols\n- **No Restarts:** Ensure that neither the backend nor the frontend services are restarted during the testing or development processes. Manual start/stop should be relied upon to manage service uptime.\n- **No Builds:** Avoid building the frontend or backend components in a development environment while maintaining current tests. Establish a procedure for using already built artifacts in production or testing.\n- **Manual Interventions:** All changes must be applied manually, with any configuration updates indicated in the relevant documentation to prevent unintentional builder restarts or service interruptions.\n\n## Documentation Structure\n- All project documentation should be placed in a `docs` folder.\n- Tests, logs, and markdown files should be organized into their respective directories:\n  - **Tests:** Stored in a `tests` folder inside the `src` or main project directory.\n  - **Logs:** Stored in a `logs` folder, clearly delineating logging per service.\n  - **Markdown Files:** Should be organized in the `docs` folder or within relevant subfolders according to the content.\n\n## Writing Tests in Python\n- Use the `pytest` framework to write clear, descriptive test cases.\n- All tests should be located in the `tests` directory with filenames corresponding to the modules they test.\n\nExample of a test using `pytest`:\n```python  \nimport pytest  \nfrom my_module import my_function  # Adjust based on your actual modules  \n\n@pytest.fixture  \ndef example_fixture():  \n    return \"example input\"  \n\ndef test_my_function(example_fixture):  \n    actual = my_function(example_fixture)  \n    expected = \"expected output\"  # Change this to your expected output  \n    assert actual == expected  "
